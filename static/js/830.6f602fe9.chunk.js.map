{"version":3,"file":"static/js/830.6f602fe9.chunk.js","mappings":"4TAEMA,EAAW,gCACXC,EAAM,mCAEL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,8FACQC,IAAAA,IAAA,UACRH,EADQ,iCACyBC,EADzB,2BADR,0GAMA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,iFACQF,IAAAA,IAAA,UACRH,EADQ,iBACSK,EADT,oBAC4BJ,EAD5B,oBADR,0GAMA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BD,GAA/B,iFACQF,IAAAA,IAAA,UACRH,EADQ,iBACSK,EADT,4BACoCJ,EADpC,2BADR,0GAMA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA4BF,GAA5B,iFACQF,IAAAA,IAAA,UACRH,EADQ,iBACSK,EADT,4BACoCJ,EADpC,oBADR,0GAMA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,iFACQN,IAAAA,IAAA,UACRH,EADQ,gCACwBC,EADxB,kBACqCQ,IAF7C,4G,+HC5BP,EAA8B,gCAA9B,EAA2E,+BAA3E,EAAyH,iCAAzH,EAAwK,gCAAxK,EAAqN,+BAArN,EAAsQ,oC,SCKvP,SAASC,IACtB,OAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOF,EAAP,KAAoBG,EAApB,KACA,GAA4BD,EAAAA,EAAAA,UAAS,MAArC,eAAOE,EAAP,KAAeC,EAAf,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,SAEzBC,GAAWC,EAAAA,EAAAA,MAmCjB,OAhBAC,EAAAA,EAAAA,YAAU,WACJJ,IACFV,EAAAA,EAAAA,IAAYU,GAAOK,MAAK,SAACC,GACvB,IACUC,EACND,EADFA,KAAQC,QAEV,GAAuB,IAAnBA,EAAQC,OACV,OAAOC,EAAAA,GAAAA,MACL,sDAGJb,EAAUW,QAGb,CAACP,KAGF,iCACE,kBAAMU,SA9BW,SAACC,GAGpB,GAFAA,EAAEC,iBAEyB,KAAvBrB,EAAYsB,OACd,OAAOJ,EAAAA,GAAAA,MAAY,gCAGrBV,EAAgB,CAAEC,MAAOT,IAEzBG,EAAe,KAqBiBoB,UAAWC,EAAzC,WACE,kBACED,UAAWC,EACXC,SArCa,SAACL,GACpBjB,EAAeiB,EAAEM,OAAOC,MAAMC,gBAqCxBD,MAAO3B,EACP6B,KAAK,QACLC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,8BAEd,mBAAQH,KAAK,SAASP,UAAWC,EAAjC,uBAKDpB,IACC,eAAImB,UAAWC,EAAf,SACGpB,EAAO8B,KAAI,SAACC,GACX,OACE,eAAmBZ,UAAWC,EAA9B,UACE,SAAC,KAAD,CACEY,GAAE,kBAAaD,EAAME,IACrBC,MAAO,CAAEC,KAAM5B,GACfY,UAAWC,EAHb,SAKGW,EAAMK,SANFL,EAAME","sources":["services/API.js","webpack://goit-react-hw-05-movies/./src/views/Movies/MoviesView.module.css?35f9","views/Movies/MoviesView.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = \"https://api.themoviedb.org/3/\";\nconst KEY = \"10da0ab85bfd05885200cf46ca6575c7\";\n\nexport async function getTrendingMovies() {\n  return await axios.get(\n    `${BASE_URL}movie/popular?api_key=${KEY}&language=en-US&page=1`\n  );\n}\n\nexport async function getMovieItem(movieId) {\n  return await axios.get(\n    `${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n}\n\nexport async function getMovieReviews(movieId) {\n  return await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n}\n\nexport async function getMovieCast(movieId) {\n  return await axios.get(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n}\n\nexport async function searchMovie(searchQuery) {\n  return await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${searchQuery}`\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"search_form\":\"MoviesView_search_form__amuG5\",\"search_btn\":\"MoviesView_search_btn__VLK+b\",\"search_input\":\"MoviesView_search_input__o5gbj\",\"movies_list\":\"MoviesView_movies_list__4FJ4O\",\"movie_item\":\"MoviesView_movie_item__Gz0lV\",\"movie_item_link\":\"MoviesView_movie_item_link__84JPT\"};","import { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { searchMovie } from \"../../services/API\";\nimport { Link, useLocation, useSearchParams } from \"react-router-dom\";\nimport styles from \"./MoviesView.module.css\";\n\nexport default function MoviesView() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [movies, setMovies] = useState(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get(\"query\");\n\n  const location = useLocation();\n  // console.log(location);\n\n  const handleChange = (e) => {\n    setSearchQuery(e.target.value.toLowerCase());\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (searchQuery.trim() === \"\") {\n      return toast.error(\"Search field can't be empty!\");\n    }\n\n    setSearchParams({ query: searchQuery });\n\n    setSearchQuery(\"\");\n  };\n\n  useEffect(() => {\n    if (query) {\n      searchMovie(query).then((data) => {\n        const {\n          data: { results },\n        } = data;\n        if (results.length === 0) {\n          return toast.error(\n            \"Sorry, there are no movies. Try another request...\"\n          );\n        }\n        setMovies(results);\n      });\n    }\n  }, [query]);\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className={styles.search_form}>\n        <input\n          className={styles.search_input}\n          onChange={handleChange}\n          value={searchQuery}\n          name=\"query\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"type to search movies...\"\n        />\n        <button type=\"submit\" className={styles.search_btn}>\n          Search\n        </button>\n      </form>\n\n      {movies && (\n        <ul className={styles.movies_list}>\n          {movies.map((movie) => {\n            return (\n              <li key={movie.id} className={styles.movie_item}>\n                <Link\n                  to={`/movies/${movie.id}`}\n                  state={{ from: location }}\n                  className={styles.movie_item_link}\n                >\n                  {movie.title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n}\n"],"names":["BASE_URL","KEY","getTrendingMovies","axios","getMovieItem","movieId","getMovieReviews","getMovieCast","searchMovie","searchQuery","MoviesView","useState","setSearchQuery","movies","setMovies","useSearchParams","searchParams","setSearchParams","query","get","location","useLocation","useEffect","then","data","results","length","toast","onSubmit","e","preventDefault","trim","className","styles","onChange","target","value","toLowerCase","name","type","autoComplete","autoFocus","placeholder","map","movie","to","id","state","from","title"],"sourceRoot":""}